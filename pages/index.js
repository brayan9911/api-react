import Head from "next/head";
import { useEffect, useState } from "react";
import axios from "axios";
import { Table, Col, Row, Button, Modal, Input } from "antd";

import { EditOutlined, DeleteOutlined } from "@ant-design/icons";
const { TextArea } = Input;

const Home = () => {
  const [data, setData] = useState([]);
  const [openModal, setOpenModal] = useState(false);
  const [form, setForm] = useState({
    nombre: "",
    descripcion: "",
  });

  useEffect(() => {
    fetchData();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const showModal = () => {
    setOpenModal(true);
    resetForm();
    setOpenModal(true);
  };
  const handleOk = () => {
    setOpenModal(false);
  };
  const handleCancel = () => {
    setOpenModal(false);
  };

  const fetchData = async () => {
    const response = await axios.get("http://localhost:4000/pelicula/");
    setData(response.data);
  };

  const handlePost = async () => {
    const response = await axios.post("http://localhost:4000/pelicula/", form);
    if (response.status === 200) {
      alert("Creacion del pelicula satisfactorio");
    } else {
      alert("Producto no ha sido creado");
    }
    console.log("response post", response);
    setOpenModal(false);
    fetchData();
  };

  const handleEdit = (record) => {
    setForm(record);
    setOpenModal(true);
  };

  const handleUpdate = async () => {
    const response = await axios.put(
      `http://localhost:4000/pelicula/${form.id}`,
      form
    );
    if (response.status === 200) {
      alert("Producto actualizado");
    } else {
      alert("Producto no ha sido actualizado");
    }
    console.log("response put", response);
    setOpenModal(false);
    fetchData();
  };

  const handleDelete = async (id) => {
    const confirmed = window.confirm(
      "¿Estás seguro de que quieres eliminar este pelicula?"
    );
    if (!confirmed) {
      return;
    }
    const response = await axios.delete(`http://localhost:4000/pelicula/${id}`);
    if (response.status === 200) {
      alert(response.data.message);
    } else {
      alert("Producto no ha sido eliminado");
    }
    fetchData();
  };

  const columns = [
    {
      title: "#",
      dataIndex: "id",
      key: "id",
    },
    {
      title: "Nombre",
      dataIndex: "nombre",
      key: "nombre",
    },
    {
      title: "Descripcion",
      dataIndex: "descripcion",
      key: "descripcion",
    },
    {
      title: "Editar",
      dataIndex: "",
      key: "x",
      render: (record) => (
        <Button type="primary" onClick={() => handleEdit(record)}>
          <EditOutlined />
        </Button>
      ),
    },
    {
      title: "Eliminar",
      dataIndex: "",
      key: "y",
      render: (record) => (
        <Button type="primary" danger onClick={() => handleDelete(record.id)}>
          <DeleteOutlined />
        </Button>
      ),
    },
  ];

  const resetForm = () => {
    setForm({
      nombre: "",
      descripcion: "",
    });
  };

  return (
    <>
      <Head>
        <title>Peliculas</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row>
        <Col span={12} offset={6}>
          <h1>Informacion de peliculas</h1>
          <div style={{ width: "100%", textAlign: "right", margin: "25px 0" }}>
            <Button type="primary" onClick={showModal}>
              Crear
            </Button>
          </div>
          <Table rowKey={"id"} dataSource={data} columns={columns} />
        </Col>
      </Row>

      <Modal
        title={form.id ? "Editar pelicula" : "Crear pelicula"}
        open={openModal}
        onOk={form.id ? handleUpdate : handlePost}
        onCancel={() => setOpenModal(false)}
      >
        <p>Nombre:</p>
        <Input
          onChange={handleChange}
          name="nombre"
          placeholder="Nombre del pelicula"
          value={form && form.nombre}
        />
        <p>Descripcion:</p>
        <TextArea
          onChange={handleChange}
          name="descripcion"
          value={form && form.descripcion}
          placeholder="Descripcion del pelicula"
          rows={4}
          maxLength={25}
        />
      </Modal>
    </>
  );
};

export default Home;
